'''
DFS, depth-first search.
Бежим до упора. возвращаемся на шаг назад и по другой ветке бежим до упора.
Когда пути из данной вершины закончились отступаем еще на шаг назад.
Реализуется через стек (LIFO).
В стеке должны храниться вершина и итератор (каких соседей уже пробежали).
Часто используется стек рекурсивно вызываемых функций.
'''


def dfs(graph, vertex, is_visited):
    ''' рекурсивный DFS. Берем вершину, отмечаем ее пройденной.
    Бежим по списку ее соседей, выбирая только еще не обойденные,
    и рекурсивно вызываем для них функцию
    '''
    if vertex not in is_visited:
        is_visited.append(vertex)
        for nxt in graph[vertex]:
            dfs(graph, nxt, is_visited)
    return is_visited


g = {
    0: [1, 8],
    1: [0],
    2: [3, 4, 5, 8],
    3: [2],
    4: [2, 7],
    5: [2, 6],
    6: [5, 8],
    7: [4, 6],
    8: [0, 2, 6]
}


v = int(input('Введите название вершины: '))
print(dfs(g, v, []))

'''[0, 1, 8, 2, 3, 4, 7, 6, 5]'''